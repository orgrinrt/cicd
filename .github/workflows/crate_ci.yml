name: Crate CI/CD

on:
  workflow_call:
    inputs:
      profile:
        description: 'Profile to use (minimal / default)'
        required: true
        default: 'minimal'
        type: string
      toolchain:
        description: 'Toolchain to install (stable / beta / nightly / <specific version>)'
        required: true
        default: 'stable'
        type: string
      components:
        description: 'Components to install with the toolchain'
        required: false
        type: string
      override:
        description: 'Whether or not to override the default toolchain'
        required: false
        type: boolean
      deploy_cratesio:
        description: "Do we deploy to cargo"
        required: false
        default: true
        type: boolean
      tests_path:
        description: "The path to the directory where the tests exists (if not /src)"
        required: false
        type: string
      force_build:
        description: "Whether or not to run build job despite having no changes to source or cargo.toml"
        required: false
        type: boolean
        default: false
      force_tests:
        description: "Whether or not to run test job despite having no changes to source/tests or cargo.toml"
        required: false
        type: boolean
        default: false
      force_deploy:
        description: "Whether or not to force deploy job"
        required: false
        type: boolean
        default: false
      auto_bump:
        description: "Whether or not to automatically bump patch number (semantic versioning)"
        required: false
        type: boolean
        default: true
      release_trigger_phrase:
        description: "Phrase to trigger a release deployment (as a regexp where we match for the release level (e.g 
        patch, beta, alpha, major, minor etc.)"
        required: false
        type: string
        default: "release::(.*?)"
#    outputs:
#      ci_skip: ${{ jobs.setup.outputs.ci_skip }}
#      cargo_toml_modified: ${{ jobs.setup.outputs.cargo_toml_modified }}
#      src_modified: ${{ jobs.setup.outputs.src_modified }}
#      tests_modified: ${{ jobs.setup.outputs.tests_modified }}
#      pr_sha: ${{ jobs.setup.outputs.pr_sha }}
#      base_sha: ${{ jobs.setup.outputs.base_sha }}
#      version: ${{ jobs.deploy.outputs.version }}
#      version_bumped: ${{ jobs.deploy.outputs.version_bumped }}
#      is_pr: ${{ jobs.setup.outputs.is_pr }}
    secrets:
      CRATES_IO_TOKEN:
        required: true
      GH_RELEASE_TOKEN:
        required: true
    

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      ci_skip: ${{ steps.check_conditions.outputs.ci_skip }}
      cargo_toml_modified: ${{ steps.check_conditions.outputs.cargo_toml_modified }}
      src_modified: ${{ steps.check_conditions.outputs.src_modified }}
      tests_modified: ${{ steps.check_conditions.outputs.tests_modified }}
      pr_sha: ${{ github.event.pull_request.head.sha }}
      base_sha: ${{ steps.check_conditions.outputs.base_sha }}
      is_pr: ${{ steps.check_conditions.outputs.is_pr }}
      release: ${{ steps.check_flags.outputs.release }}
      commit_msg: ${{ steps.check_flags.outputs.commit_msg }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
        
      - name: Check conditions and set outputs
        id: check_conditions
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_SHA="${{ github.event.pull_request.head.sha }}"
            IS_PR=true
          else
            PR_SHA="${GITHUB_SHA}"
            IS_PR=false
          fi
          MODIFIED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "::set-output name=base_sha::${GITHUB_SHA}"
          echo "::set-output name=pr_sha::${PR_SHA}"
          echo "::set-output name=ci_skip::$(echo ${COMMIT_MSG} | grep -q '\[ci skip\]' && echo true || echo false)"
          echo "::set-output name=cargo_toml_modified::$(echo ${MODIFIED_FILES} | grep -q '\*\*/Cargo.toml' && echo true || echo false)"
          echo "::set-output name=src_modified::$(echo ${MODIFIED_FILES} | grep -q 'src/' && echo true || echo false)"
          echo "::set-output name=tests_modified::$(echo ${MODIFIED_FILES} | grep -q ${{ inputs.tests_path }} && echo true || echo false)"
          echo "::set-output name=is_pr::$IS_PR"
          
          if [[ -z "${{ secrets.GH_RELEASE_TOKEN }}" && -z "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "::error::Release tokens do not exist or is empty."
            echo "::info::Make sure you provide either one of these"
            echo "::info::Make sure either of the tokens has proper release rights, also."
            exit 1
          fi
          
          echo "::info::Force build is set to ${{ inputs.force_build }}"
          echo "::info::Force tests is set to ${{ inputs.force_tests }}"
          echo "::info::Force deploy is set to ${{ inputs.force_deploy }}"
          echo "::info::Modified files were: $(echo ${MODIFIED_FILES} | tr ' ' '\\n')"
          
      - name: Check explicit flags
        id: check_flags
        run: |
          message=$(git log --format=%B -n 1 ${{ github.event.after }})
          if [[ $message =~ "${{ inputs.release_trigger_phrase }}" ]]; then 
            echo "::set-output name=release::true"
          else
            echo "::set-output name=release::false"
          fi
          echo "::set-output name=commit_msg::${message}"
          
  build:
    needs: setup
    runs-on: ubuntu-latest
    if: |
      ((needs.setup.outputs.ci_skip == 'false' || needs.setup.outputs.ci_skip == false) &&
      ((needs.setup.outputs.cargo_toml_modified == 'true' || needs.setup.outputs.cargo_toml_modified == true )||
      (needs.setup.outputs.src_modified == 'true' || needs.setup.outputs.src_modified == true))) || 
      (inputs.force_build == true || inputs.force_build == 'true') ||
      (needs.setup.outputs.release == 'true' || needs.setup.outputs.release == true )
    steps:
      - name: Init crate workflow
        uses: orgrinrt/cicd/.github/actions/init_crate_workflow@main
        with:
          profile: ${{ inputs.profile }}
          toolchain: ${{ inputs.toolchain }}
          components: ${{ inputs.components }}
          override: ${{ inputs.override }}

      - name: Formatting
        run: |
          set -e
          set -o pipefail
          
          rustup component add rustfmt

          # Create a backup of current state
          for file in $(find . -name '*.rs'); do
            cp $file{,.bak}
          done

          # Format the code
          cargo fmt >/dev/null

          # Compare the changes and output in a readable diff format
          for file in $(find . -name '*.rs'); do
              diff -U0 --minimal $file.bak $file || true
              rm $file.bak
          done

          # Reset formatted files, to not include actual formatting in the commit
          git checkout .

          # Check if formatting is correct, will exit with code 1 if not, failing the step
          cargo fmt -- --check >/dev/null

      - name: Lints
        run: |
          set -e
          set -o pipefail
          rustup component add clippy
          cargo clippy -- -D warnings
          
      - name: Build
        run: cargo build #--release

      - name: Check for warnings
        run: cargo rustc -- -D warnings
        
          
  test:
    needs: [setup, build]
    runs-on: ubuntu-latest
    
    if: |
      ((needs.setup.outputs.ci_skip == 'false' || needs.setup.outputs.ci_skip == false) &&
      ((needs.setup.outputs.cargo_toml_modified == 'true' || needs.setup.outputs.cargo_toml_modified == true) ||
      (needs.setup.outputs.src_modified == 'true' || needs.setup.outputs.src_modified == true) ||
      (needs.setup.outputs.tests_modified == 'true' || needs.setup.outputs.tests_modified == true))) || 
      (inputs.force_tests == true || inputs.force_tests == 'true') ||
      (needs.setup.outputs.release == 'true' || needs.setup.outputs.release == true )
    steps:
      - name: Init crate workflow
        uses: orgrinrt/cicd/.github/actions/init_crate_workflow@main
        with:
          profile: ${{ inputs.profile }}
          toolchain: ${{ inputs.toolchain }}
          components: ${{ inputs.components }}
          override: ${{ inputs.override }}

      - name: Run tests
        if: ((inputs.deploy_cratesio != true || inputs.deploy_cratesio != 'true') &&
          (inputs.force_deploy != true || inputs.force_deploy != 'true'))
        run: |
          set -e
          set -o pipefail
          cargo test --lib --all
          
      - name: Run tests, generate code coverage and save as artifact
        if: |
          github.ref == 'refs/heads/main' &&
          ((inputs.deploy_cratesio == true || inputs.deploy_cratesio == 'true') || 
           (inputs.force_deploy == true || inputs.force_deploy == 'true'))
        run: |
          set -e
          set -o pipefail
          cargo install cargo-tarpaulin
          cargo tarpaulin --out Xml
        id: coverage

      - name: Upload coverage to GitHub Artifacts
        uses: actions/upload-artifact@v2
        if: |
          github.ref == 'refs/heads/main' &&
          ((inputs.deploy_cratesio == true || inputs.deploy_cratesio == 'true') || 
           (inputs.force_deploy == true || inputs.force_deploy == 'true'))
        with:
          name: code-coverage-report
          path: target/debug/tarpaulin-report.xml
          
          
  deploy:
    needs: [setup, build, test]
    runs-on: ubuntu-latest
    if: |
      (((needs.setup.outputs.ci_skip == 'false' || needs.setup.outputs.ci_skip == false) ||
      (needs.setup.outputs.release == 'true' || needs.setup.outputs.release == true ) &&
      (needs.setup.outputs.is_pr == 'false' || needs.setup.outputs.is_pr == false)) &&
      (github.event_name == 'push' && github.ref == 'refs/heads/main')) || 
      (inputs.force_deploy == true || inputs.force_deploy == 'true')
    outputs:
      bump: ${{ steps.version.outputs.bump }}
      version: ${{ steps.version.outputs.version }}
      version_second: ${{ steps.version_second.outputs.version_second }}
      tag: ${{ steps.version_second.outputs.tag }}
    steps:
      - name: Init crate workflow
        uses: orgrinrt/cicd/.github/actions/init_crate_workflow@main
        with:
          profile: ${{ inputs.profile }}
          toolchain: ${{ inputs.toolchain }}
          components: ${{ inputs.components }}
          override: ${{ inputs.override }}
        
      - name: Documentation
        run: |
          set -e
          set -o pipefail
          cargo doc --no-deps
          
      - name: Install cargo-release
        run: cargo install cargo-release

      - name: Configure git user
        run: |
          set -e
          set -o pipefail
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          
      - name: Setup cargo publish token
        if: (inputs.deploy_cratesio == true || inputs.deploy_cratesio == 'true')
        run: |
          mkdir -p ~/.cargo
          echo "[registry]" > ~/.cargo/credentials
          echo "token = \"${{ secrets.CRATES_IO_TOKEN }}\"" >> ~/.cargo/credentials
          
      - name: Extract release level from commit message and deploy
        id: extract-level
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1)
          if [[ $COMMIT_MSG =~ ${{ inputs.release_trigger_phrase }} ]]
          then
            LEVEL=${BASH_REMATCH[1]}
            echo "::set-output name=release-level::$LEVEL"
          fi
          
      - name: Automatic version bump and deploy
        if: |
          ((inputs.auto_bump == 'true' || inputs.auto_bump == true) &&
          (inputs.deploy_cratesio == 'true' || inputs.deploy_cratesio == true)) ||
          steps.extract-level.outputs.release-level != ''
        run: |
          set -e
          set -o pipefail
          cargo release ${{ steps.extract-level.outputs.release-level }}  --no-confirm --push
          
      - name: Automatic version bump but NO deploy
        if: |
          ((inputs.auto_bump == 'true' || inputs.auto_bump == true) &&
          (inputs.deploy_cratesio == 'false' || inputs.deploy_cratesio == false)) ||
          steps.extract-level.outputs.release-level != ''
        run: |
          set -e
          set -o pipefail
          cargo release ${{ steps.extract-level.outputs.release-level }}  --no-confirm
          
      - name: Check for version after cargo-release
        id: version
        run: |
          set -e
          set -o pipefail
          echo "::set-output name=version::$(grep '^version =' Cargo.toml | head -1 | awk '{print $3}' | sed 's/\"//g')"
          echo "::set-output name=tag::${git describe --tags --abbrev=0 $(git rev-list --tags --max-count=1)}"
          
      - name: Push Tags
        run: |
          if git tag -l "${{ steps.version.outputs.tag }}"
            then
              echo  "Tag already exists locally, not creating a new one (probably already covered by cargo-release"
            else
              git tag -a ${{ steps.version.outputs.tag }} -m "${{ needs.setup.outputs.commit_msg }}"
          fi
          
          git push origin --tags "${{ steps.version.outputs.tag }}"
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: |
            ${{ secrets.GH_RELEASE_TOKEN != null || secrets.GH_RELEASE_TOKEN != false && 
            secrets.GH_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
