name: Crate CI/CD

on:
  workflow_call:
    inputs:
      profile:
        description: 'Profile to use (minimal / default)'
        required: true
        default: 'minimal'
        type: string
      toolchain:
        description: 'Toolchain to install (stable / beta / nightly / <specific version>)'
        required: true
        default: 'stable'
        type: string
      components:
        description: 'Components to install with the toolchain'
        required: false
        type: string
      override:
        description: 'Whether or not to override the default toolchain'
        required: false
        type: boolean
      deploy_cratesio:
        description: 'Do we deploy to cargo'
        required: false
        default: true
        type: boolean
      tests_path:
        description: 'The path to the directory where the tests exists (if not /src)'
        required: false
        type: string
      force_build:
        description: 'Whether or not to run build job despite having no changes to source or Cargo.toml'
        required: false
        type: boolean
        default: false
      force_tests:
        description: 'Whether or not to run test job despite having no changes to source/tests or Cargo.toml'
        required: false
        type: boolean
        default: false
      force_deploy:
        description: 'Whether or not to force deploy job'
        required: false
        type: boolean
        default: false
      auto_bump:
        description: 'Whether or not to automatically bump patch number (semantic versioning)'
        required: false
        type: boolean
        default: true
      release_trigger_phrase:
        description: 'Phrase to trigger a release deployment (as a regexp where we match for the release level (e.g. patch, beta, alpha, major, minor etc.))'
        required: false
        type: string
        default: 'release::(\S*)'
      deploy_env_name:
        description: 'name of github environment to use'
        required: false
        type: string
        default: 'production'
      test_feature_sets:
        description: 'a list of feature flags to test in combination along with the default test, separated by comma'
        required: false
        type: string
        default: ''
      use_tarpaulin:
        description: 'Should tarpaulin be used for code coverage (not really implemented yet)'
        required: false
        type: boolean
        default: false
    secrets:
      CRATES_IO_TOKEN:
        required: true
      GH_RELEASE_TOKEN:
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      ci_skip: ${{ steps.check_conditions.outputs.ci_skip }}
      cargo_toml_modified: ${{ steps.check_conditions.outputs.cargo_toml_modified }}
      src_modified: ${{ steps.check_conditions.outputs.src_modified }}
      tests_modified: ${{ steps.check_conditions.outputs.tests_modified }}
      pr_sha: ${{ github.event.pull_request.head.sha }}
      base_sha: ${{ steps.check_conditions.outputs.base_sha }}
      is_pr: ${{ steps.check_conditions.outputs.is_pr }}
      release: ${{ steps.check_flags.outputs.release }}
      commit_msg: ${{ steps.check_flags.outputs.commit_msg }}
      release_level: ${{ steps.extract_level.outputs.release_level }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_RELEASE_TOKEN }}

      - name: Check conditions and set outputs
        id: check_conditions
        run: |
          COMMIT_MSG=$(echo "${{ github.event.head_commit.message }}" | tr '\`' '\\\`')
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_SHA="${{ github.event.pull_request.head.sha }}"
            IS_PR=true
          else
            PR_SHA="${GITHUB_SHA}"
            IS_PR=false
          fi
          MODIFIED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "base_sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "pr_sha=${PR_SHA}" >> $GITHUB_OUTPUT
          echo "ci_skip=$(echo ${COMMIT_MSG} | grep -q '\[ci skip\]' && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "cargo_toml_modified=$(echo ${MODIFIED_FILES} | grep -q '\*\*/Cargo\.toml' && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "src_modified=$(echo ${MODIFIED_FILES} | grep -q 'src/' && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "tests_modified=$(echo ${MODIFIED_FILES} | grep -q ${{ inputs.tests_path }} && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "is_pr=$IS_PR" >> $GITHUB_OUTPUT
          if [[ -z "${{ secrets.GH_RELEASE_TOKEN }}" && -z "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "::error::Release tokens do not exist or is empty."
            exit 1
          fi

      - name: Check explicit flags
        id: check_flags
        env:
          COMMITS: ${{ toJson(github.event.commits) }}
        run: |
          message=$(echo "$COMMITS" | jq -r '.[-1].message')
          if echo "${message}" | grep -qP "${{ inputs.release_trigger_phrase }}"; then
            MATCH_FOUND=0
          else
            MATCH_FOUND=1
          fi
          if [ $MATCH_FOUND -eq 0 ]; then
            echo "release=true" >> $GITHUB_OUTPUT
          else
            echo "release=false" >> $GITHUB_OUTPUT
          fi
          echo "commit_msg=$(echo "${message}" | tr '\`' '\\\`')" >> $GITHUB_OUTPUT

      - name: Extract release level from commit message and deploy
        id: extract_level
        run: |
          COMMIT_MSG="${{ steps.check_flags.outputs.commit_msg }}"
          LEVEL=$(echo "$COMMIT_MSG" | perl -nle 'print $1 if /${{ inputs.release_trigger_phrase }}/')
          if [[ $LEVEL ]]; then
            echo "release_level=$LEVEL" >> $GITHUB_OUTPUT
          fi
  
  msrv:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Init crate workflow
        uses: orgrinrt/cicd/.github/actions/init_crate_workflow@main
        with:
          profile: ${{ inputs.profile }}
          toolchain: ${{ inputs.toolchain }}
          components: ${{ inputs.components }}
          override: ${{ inputs.override }}

      - name: Install cargo-msrv
        run: cargo install cargo-msrv

      - name: Find and update MSRV
        if: github.event_name == 'push'
        id: find_msrv
        run: |
          MSRV=$(cargo msrv --output-format json | jq -r '.msrv')
          echo "Detected MSRV: $MSRV"
          echo "MSRV=$MSRV" >> $GITHUB_ENV
          cargo msrv verify --rust-version $MSRV
          # Check if workspace mode is enabled
          if grep -qE '^rust-version\.workspace\s*=\s*true' Cargo.toml; then
            echo "Workspace mode detected."
            if grep -qE '^\[workspace\.package\]' Cargo.toml; then
              if grep -qE '^\s*rust-version\s*=' Cargo.toml; then
                sed -i -E "s/^(\\s*rust-version\\s*=\\s*\").*(\")/\\1${MSRV}\\2/" Cargo.toml
              else
                sed -i '/^\[workspace\.package\]/a rust-version = "'"${MSRV}"'"' Cargo.toml
              fi
            elif grep -qE '^\[workspace\]' Cargo.toml && grep -qE '^\s*package\.rust-version' Cargo.toml; then
              if grep -qE '^\s*package\.rust-version\s*=' Cargo.toml; then
                sed -i -E "s/^(\\s*package\\.rust-version\\s*=\\s*\").*(\")/\\1${MSRV}\\2/" Cargo.toml
              else
                sed -i '/^\[workspace\]/a package.rust-version = "'"${MSRV}"'"' Cargo.toml
              fi
            else
              echo "Warning: No [workspace.package] or [workspace] with package.rust-version found."
            fi
          else
            if grep -qE '^package\.rust-version' Cargo.toml; then
              sed -i -E "s/^(package\.rust-version\\s*=\\s*\").*(\")/\\1${MSRV}\\2/" Cargo.toml
            else
              sed -i '/^\[package\]/a rust-version = "'"${MSRV}"'"' Cargo.toml
            fi
          fi
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add Cargo.toml
          git commit -m "Update MSRV to $MSRV" || echo "No changes to commit"
          git push

      - name: Verify current MSRV
        if: github.event_name == 'pull_request'
        run: |
          CURRENT_MSRV=$(grep -oP 'package\.rust-version\s*=\s*"\K[0-9]+\.[0-9]+\.[0-9]+(?=")' Cargo.toml)
          echo "Current MSRV: $CURRENT_MSRV"
          cargo msrv verify --rust-version $CURRENT_MSRV
  
  build:
    needs: [ setup, msrv ]
    runs-on: ubuntu-latest
    if: |
      ((needs.setup.outputs.ci_skip == 'false' || needs.setup.outputs.ci_skip == false) &&
      ((needs.setup.outputs.cargo_toml_modified == 'true' || needs.setup.outputs.cargo_toml_modified == true) ||
      (needs.setup.outputs.src_modified == 'true' || needs.setup.outputs.src_modified == true))) ||
      (inputs.force_build == true || inputs.force_build == 'true') ||
      (needs.setup.outputs.release == 'true' || needs.setup.outputs.release == true)
    steps:
      - name: Init crate workflow
        uses: orgrinrt/cicd/.github/actions/init_crate_workflow@main
        with:
          profile: ${{ inputs.profile }}
          toolchain: ${{ inputs.toolchain }}
          components: ${{ inputs.components }}
          override: ${{ inputs.override }}

      - name: Formatting
        run: |
          set -e
          set -o pipefail
          rustup component add rustfmt
          for file in $(find . -name '*.rs'); do cp $file{,.bak}; done
          cargo fmt >/dev/null
          for file in $(find . -name '*.rs'); do diff -U0 --minimal $file.bak $file || true; rm $file.bak; done
          git checkout .
          cargo fmt -- --check >/dev/null

      - name: Lints
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Check for warnings
        run: cargo rustc -- -D warnings
  
  test:
    needs: [ setup, build ]
    runs-on: ubuntu-latest
    if: |
      ((needs.setup.outputs.ci_skip == 'false' || needs.setup.outputs.ci_skip == false) &&
      ((needs.setup.outputs.cargo_toml_modified == 'true' || needs.setup.outputs.cargo_toml_modified == true) ||
      (needs.setup.outputs.src_modified == 'true' || needs.setup.outputs.src_modified == true) ||
      (needs.setup.outputs.tests_modified == 'true' || needs.setup.outputs.tests_modified == true))) ||
      (inputs.force_tests == true || inputs.force_tests == 'true') ||
      (needs.setup.outputs.release == 'true' || needs.setup.outputs.release == true)
    steps:
      - name: Init crate workflow
        uses: orgrinrt/cicd/.github/actions/init_crate_workflow@main
        with:
          profile: ${{ inputs.profile }}
          toolchain: ${{ inputs.toolchain }}
          components: ${{ inputs.components }}
          override: ${{ inputs.override }}

      - name: Run tests
        if: |
          ((needs.setup.outputs.release == false || needs.setup.outputs.release == 'false') &&
          (inputs.force_deploy == false || inputs.force_deploy == 'false')) ||
          (inputs.use_tarpaulin == false || inputs.use_tarpaulin == 'false')
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib --all

      - name: Run specific tests with feature flags
        if: |
          inputs.test_feature_sets != '' &&
          ((needs.setup.outputs.release == false || needs.setup.outputs.release == 'false') &&
          (inputs.force_deploy == false || inputs.force_deploy == 'false'))
        run: |
          IFS=', ' read -r -a feature_array <<< "${{ inputs.test_feature_sets }}"
          for feature_set in "${feature_array[@]}"; do
            echo "Running tests with features: $feature_set"
            cargo test --no-default-features --features "$feature_set"
          done

      - name: Run tests, generate code coverage and save as artifact
        if: |
          github.ref == 'refs/heads/main' &&
          ((needs.setup.outputs.release == true || needs.setup.outputs.release == 'true') ||
          (inputs.force_deploy == true || inputs.force_deploy == 'true')) &&
          (inputs.use_tarpaulin == true || inputs.use_tarpaulin == 'true')
        uses: actions-rs/tarpaulin@v1
        with:
          args: --out Xml
        id: coverage

      - name: Upload coverage to GitHub Artifacts
        uses: actions/upload-artifact@v4
        if: |
          github.ref == 'refs/heads/main' &&
          ((needs.setup.outputs.release == true || needs.setup.outputs.release == 'true') ||
          (inputs.force_deploy == true || inputs.force_deploy == 'true')) &&
          (inputs.use_tarpaulin == true || inputs.use_tarpaulin == 'true')
        with:
          name: code-coverage-report
          path: target/debug/tarpaulin-report.xml

      - name: Update cache
        uses: orgrinrt/cicd/.github/actions/init_crate_workflow@main
        with:
          profile: ${{ inputs.profile }}
          toolchain: ${{ inputs.toolchain }}
          components: ${{ inputs.components }}
          override: ${{ inputs.override }}
          only_cache: true
  
  deploy:
    needs: [ setup, build, test ]
    environment: ${{ inputs.deploy_env_name }}
    runs-on: ubuntu-latest
    if: |
      ((((needs.setup.outputs.ci_skip == 'false' || needs.setup.outputs.ci_skip == false) ||
      (needs.setup.outputs.release == 'true' || needs.setup.outputs.release == true) &&
      (needs.setup.outputs.is_pr == 'false' || needs.setup.outputs.is_pr == false)) &&
      (github.event_name == 'push' && github.ref == 'refs/heads/main')) ||
      (inputs.force_deploy == true || inputs.force_deploy == 'true')) &&
      (needs.setup.outputs.release == 'true' || needs.setup.outputs.release == true)
    outputs:
      bump: ${{ steps.version.outputs.bump }}
      version: ${{ steps.version.outputs.version }}
      version_second: ${{ steps.version_second.outputs.version_second }}
      tag: ${{ steps.version_second.outputs.tag }}
    steps:
      - name: Init crate workflow
        uses: orgrinrt/cicd/.github/actions/init_crate_workflow@main
        with:
          profile: ${{ inputs.profile }}
          toolchain: ${{ inputs.toolchain }}
          components: ${{ inputs.components }}
          override: ${{ inputs.override }}

      - name: Fail if release level is undefined
        if: needs.setup.outputs.release_level == ''
        run: |
          echo "info::No release level defined"
          exit 1

      - name: Documentation
        run: |
          set -e
          set -o pipefail
          cargo doc --no-deps

      - name: Install cargo-release
        run: cargo install cargo-release

      - name: Update cache
        uses: orgrinrt/cicd/.github/actions/init_crate_workflow@main
        with:
          profile: ${{ inputs.profile }}
          toolchain: ${{ inputs.toolchain }}
          components: ${{ inputs.components }}
          override: ${{ inputs.override }}
          only_cache: true

      - name: Configure git user
        run: |
          set -e
          set -o pipefail
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"

      - name: Setup cargo publish token
        if: (inputs.deploy_cratesio == true || inputs.deploy_cratesio == 'true')
        run: |
          set -e
          set -o pipefail
          mkdir -p ~/.cargo
          echo "[registry]" > ~/.cargo/credentials
          echo "token = \"${{ secrets.CRATES_IO_TOKEN }}\"" >> ~/.cargo/credentials

      - name: Automatic version bump but NO deploy
        run: |
          set -e
          set -o pipefail
          cargo release ${{ needs.setup.outputs.release_level }} --no-publish --no-confirm --execute

      - name: Fetch the latest tag
        id: latest_tag
        run: |
          set -e
          set -o pipefail
          git fetch --tags
          echo "tag=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT

      - name: Update a version badge if one exists
        id: update_badge
        run: |
          set -e
          set -o pipefail
          LATEST_TAG=${{ steps.latest_tag.outputs.tag }}
          VERSION_IDENTIFIER=${LATEST_TAG#v}
          VERSION_IDENTIFIER=${VERSION_IDENTIFIER//-/_}
          if [ ! -f README.md ]; then
            echo "No README.md file found."
            exit 1
          fi
          sed -i.bak -E "s/(version-)[^-\]+(-.*\.svg)/\1${VERSION_IDENTIFIER}\2/g" README.md
          if git diff --quiet README.md; then
            echo "No changes detected in README.md, skipping commit and push."
            exit 0
          else
            rm README.md.bak
            git add README.md
            git commit -m "Updated version badge to ${VERSION_IDENTIFIER}"
            git push
          fi
          git fetch

      - name: Deploy to crates\.io
        if: ((inputs.deploy_cratesio == 'true' || inputs.deploy_cratesio == true))
        run: |
          set -e
          set -o pipefail
          cargo publish

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.latest_tag.outputs.tag }}
          release_name: Release ${{ steps.latest_tag.outputs.tag }}
          draft: false
          prerelease: false
